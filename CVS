            
            
            ### CVS - Concurrent Versions System ###


  #https://durak.org/sean/pubs/software/cvsbook/
  
  #http://vasc.ri.cmu.edu/old_help/Archiving/Cvs/cvs_tutorial.texinfo.html
  #https://web.archive.org/web/20140225141753/http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs.html
  
  
  
# CVS: overall info
  
  #http://nongnu.org/cvs/#TOCintroduction

  #CVS is a version control system, an important component of Source Configuration 
  Management (SCM). Using it, you can record the history of sources files, and documents. 

  
  #http://vasc.ri.cmu.edu/old_help/Archiving/Cvs/cvs_tutorial.texinfo.html
  #CVS is a system that lets groups of people work simultaneously on groups of files (for 
  instance program sources).

  #It works by holding a central `repository' of the most recent version of the files. You 
  may at any time create a personal copy of these files by `checking out' the files from 
  the repository into one of your directories. If at a later date newer versions of the 
  files are put in the repository, you can `update' your copy.

  #You may edit your copy of the files freely. If new versions of the files have been put 
  in the repository in the meantime, doing an update merges the changes in the central 
  copy into your copy.

  #When you are satisfied with the changes you have made in your copy of the files, you 
  can `commit' them into the central repository.

  #When you are finally done with your personal copy of the files, you can `release' them and then remove them.


  #https://web.archive.org/web/20140218222232/http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_1.html#SEC1
  
  #You could of course save every version of every file you have ever created. This would 
  however waste an enormous amount of disk space. CVS stores all the versions of a file in 
  a single file in a clever way that only stores the differences between versions.
  
  #CVS also helps you if you are part of a group of people working on the same project. It 
  is all too easy to overwrite each others’ changes unless you are extremely careful. CVS 
  solves this problem by insulating the different developers from each other . Every 
  developer works in his own directory, and CVS merges the work when each developer is 
  done.
  
  #CVS is not a build system.
  CVS does not dictate how you build anything. It merely stores files for retrieval in a 
  tree structure you devise.
  
  #CVS does not have change control
  
  #The first thing to understand is that CVS stores all files in a centralized repository
  
  #The ‘CVS’ directory is used internally by CVS. Normally, you should not modify or 
  remove any of the files in it.
  
  #When CVS starts the editor, it includes a list of files which are modified. For the CVS 
  client, this list is based on comparing the modification time of the file against the 
  modification time that the file had when it was last gotten or updated. Therefore, if a 
  file’s modification time has changed but its contents have not, it will show up as 
  modified. The simplest way to handle this is simply not to worry about it—if you proceed 
  with the commit CVS will detect that the contents are not modified and treat it as an 
  unmodified file. The next update will clue CVS in to the fact that the file is unmodifie
  d, and it will reset its stored timestamp so that the file will not show up in future 
  editor sessions.




# CVS: basic words

  #http://vasc.ri.cmu.edu/old_help/Archiving/Cvs/cvs_tutorial.texinfo.html

  Repository
  #The directory storing the master copies of the files. The main or master repository is 
  a tree of directories.

  Module
  #A specific directory (or mini-tree of directories) in the main repository. Modules are 
  defined in the CVS modules file.

  RCS
  #Revision Control System. A lower-level set of utilities on which CVS is layered.

  Check out
  #To make a copy of a file from its repository that can be worked on or examined.

  Revision
  #A numerical or alpha-numerical tag identifying the version of a file.




# CVS: basic commands

  #http://vasc.ri.cmu.edu/old_help/Archiving/Cvs/cvs_tutorial.texinfo.html
  
  #To make a copy of a file from its repository that can be worked on or examined.
cvs checkout
  OR
cvs co

  #To make a local copy of a module's files from the repository execute cvs checkout 
  module where module is an entry in your modules file (see below). This will create a sub
  -directory module and check-out the files from the repository into the sub-directory for 
  you to work on.
cvs checkout module

  #To update your copy of a module with any changes from the central repository, execute 
  cvs update. This will tell you which files have been updated (their names are displayed 
  with a U before them), and which have been modified by you and not yet committed 
  (preceded by an M).
  #It can be that when you do an update, the changes in the central copy clash with 
  changes you have made in your own copy. You will be warned of any files that contain 
  clashes by a preceding C. Inside the files the clashes will be marked in the file 
  surrounded by lines of the form <<<< and >>>>. You have to resolve the clashes in your 
  copy by hand. After an update where there have been clashes, your original version of 
  the file is saved as .#file.version.
  #If you feel you have messed up a file and wish to have CVS forget about your changes 
  and go back to the version from the repository, delete the file and do an cvs update. 
  CVS will announce that the file has been ``lost'' and will give you a fresh copy.
cvs update

  #When you think your files are ready to be merged back into the repository for the rest 
  of your developers to see, execute cvs commit. You will be put in an editor to make a 
  message that describes the changes that you have made (for future reference). Your 
  changes will then be added to the central copy.
  #When you do a commit, if you haven't updated to the most recent version of the files, 
  CVS tells you this; then you have to first update, resolve any possible clashes, and 
  then redo the commit.
cvs commit

  #It can be that the changes you want to make involve a completely new file, or removing 
  an existing one. The commands to use here are:
  #You still have to do a commit after these commands to make the additions and removes 
  actually take affect. You may make any number of new files in your copy of the repositor
  y, but they will not be committed to the central copy unless you do a cvs add.
  #CVS remove does not actually remove the files from the repository. It only removes them 
  from the ``current list'' and puts the files in the CVS Attic. When another person 
  checks out the module in the future they will not get the files that were removed. But 
  if you ask for older versions that had the file before it was removed, the file will be 
  checked out of the Attic.
cvs add filename
cvs remove filename  
  
  #When you are done with your local copy of the files for the time being and want to 
  remove your local copy use cvs release module. This must be done in the directory above 
  the module sub-directory you which to release. It safely cancels the effects of cvs 
  checkout. Usually you should do a commit first.
cvs release

  #If you wish to have CVS also remove the module sub-directory and your local copy of the 
  files then your
  #NOTE: Take your time here. CVS will inform you of files that may have changed or it 
  does not know about (watch for the ? lines) and then with ask you to confirm this action
  . Make sure you want to do this.
cvs release -d module

  #To see the commit messages for files, and who made them, use:
cvs log [filename(s)]

  #To see in which revision wich line of file was modified last time
cvs annotate [filename(s)]

  #To see the differences between your version of the files and the version in the 
  repository do:
cvs diff [filename(s)]

  #One of the exciting features of CVS is its ability to mark all the files in a module at 
  once with a symbolic name. You can say `this copy of my files is version 3'. And then 
  later say `this file I am working on looked better in version 3 so check out the copy 
  that I marked as version 3.'
  #Use cvs tag to tag the version of the files that you have checked out. You can then at 
  a later date retrieve this version of the files with the tag.
cvs tag tag-name [filenames]
  #Later you can do:
cvs co -r tag-name module

  #Like tag, rtag marks the current versions of files but it does not work on your local 
  copies but on the files in the repository. To tag all my libraries with a version name I 
  can do:
  #This will recursively go through all the repository directories below lib and add the 
  LIBRARY_2_0 tag to each file. This is one of the most useful features of CVS (IMHO). Use       
  this feature if you about to release a copy of the files to the outside world or just 
  want to mark a point in the developmental progression of the files.
cvs rtag LIBRARY_2_0 lib

  #To find out information about your CVS repositories use the cvs history command. By 
  default history will show you all the entries that correspond to you. Use the -a option 
  to show information about everyone.
cvs history
    #shows you (a)ll the checked (o)ut modules
cvs history -a -o   
    #reports (a)ll the r(T)ags for the modules
cvs history -a -T   
    #reports (a)ll the information about (e)verything
cvs history -a -e   





CVS: add/remove files
  #It can be that the changes you want to make involve a completely new file, or removing 
  an existing one. The commands to use here are:
  #You still have to do a commit after these commands to make the additions and removes 
  actually take affect. You may make any number of new files in your copy of the repositor
  y, but they will not be committed to the central copy unless you do a cvs add.
  #CVS remove does not actually remove the files from the repository. It only removes them 
  from the ``current list'' and puts the files in the CVS Attic. When another person 
  checks out the module in the future they will not get the files that were removed. But 
  if you ask for older versions that had the file before it was removed, the file will be 
  checked out of the Attic.

  
  # Add single file
  
cvs add filename
cvs commit filename

cvs remove filename 



  #Add multiply files
  
		#First, add all the directories, but not any named "CVS":

find . -type d \! -name CVS -exec cvs add '{}' \;

		#Then prepare to add all the files, excluding anything in a CVS directory:

find . \( -type d -name CVS -prune \) -o \( -type f -exec cvs add '{}' \; \)         <== DOESN'T add anything to the repo in fact - just notifying repo 
																			         that this file should be in the module
	
		#Actually add all the files, excluding anything in a CVS directory:
	
find . \( -type d -name CVS -prune \) -o \( -type f -exec cvs commit -m "xburser:  first file adding" '{}' \; \)       <== DOES add file to the repo in fact




-- Create work dir at repo
cd $CVSROOT
mkdir td
-- Outside repo ckeckout that dir
cvs co td
-- Go to that dir
cd td
-- Create necessary file
vi tf.txt
stroka 1
-- Add necessary file to dir at repo
cvs add tf.txt
-- Commit that changes
cvs commit tf.txt





# COMMANDS: view all
cvs --help-commands
      CVS commands are:
              add          Add a new file/directory to the repository
              admin        Administration front end for rcs
              annotate     Show last revision where each line was modified
              checkout     Checkout sources for editing
              commit       Check files into the repository
              diff         Show differences between revisions
              edit         Get ready to edit a watched file
              editors      See who is editing a watched file
              export       Export sources from CVS, similar to checkout
              history      Show repository access history
              import       Import sources into CVS, using vendor branches
              init         Create a CVS repository if it doesn't exist
              log          Print out history information for files
              login        Prompt for password for authenticating server
              logout       Removes entry in .cvspass for remote repository
              pserver      Password server mode
              rannotate    Show last revision where each line of module was modified
              rdiff        Create 'patch' format diffs between releases
              release      Indicate that a Module is no longer in use
              remove       Remove an entry from the repository
              rlog         Print out history information for a module
              rtag         Add a symbolic tag to a module
              server       Server mode
              status       Display status information on checked out files
              tag          Add a symbolic tag to checked out version of files
              unedit       Undo an edit command
              update       Bring work tree in sync with repository
              version      Show current CVS version(s)
              watch        Set watches
              watchers     See who is watching a file




# DOWNLOAD: where
  
  #https://web.archive.org/web/20140219212554/http://cvs.nongnu.org/#downloading




# INSTALLATION: how

  #Building from source code under Unix
  #man INSTALL
    
    #1) "C compiler" is necessary
sudo pkg install gcc-48

    #2) Run "configure" (from dir with source)
    Will create necessary dirs (bin and share) in ...
      ... by default - /usr/local:
./configure
      ... OR specified directory:
./configure --prefix=/u01/installed/cvs

    #3) Try to build it
    This will (hopefully) make the needed CVS binaries within the
    "src" directory.  If something fails for your system, and you want
    to submit a bug report, you may wish to include your
    "config.status" file, your host type, operating system and
    compiler information, make output, and anything else you think
    will be helpful.
make

    #4) Install the binaries/documentation
    Depending on your installation's configuration, you may need to be
    root to do this
make install

    #5) Add necessary system variables:
vi cvs.env
export CVSROOT=/u01/projects/cvs
export PATH=$PATH:/usr/local/bin/:/u01/installed/cvs/bin/
  



# ENV: which

  $CVSROOT
  Set the CVSROOT environment variable to where you want to put your source repository.
  
  $CVSEDITOR
  #Which editor is started.
  #If isn't set, then if the environment variable $EDITOR is set, it will be used.
  #If both $CVSEDITOR and $EDITOR are not set then there is a default which will vary with 
  your operating system, for example vi for unix or notepad for Windows NT/95.
  
  $VISUAL
  #In addition, CVS checks the $VISUAL environment variable. Opinions vary on whether this 
  behavior is desirable and whether future releases of CVS should check $VISUAL or ignore 
  it. You will be OK either way if you make sure that $VISUAL is either unset or set to 
  the same thing as $EDITOR.




# OPTIONS: view all

cvs --help-options
      CVS global options (specified before the command name) are:
          -H           Displays usage information for command.
          -Q           Cause CVS to be really quiet.
          -q           Cause CVS to be somewhat quiet.
          -r           Make checked-out files read-only.
          -w           Make checked-out files read-write (default).
          -n           Do not execute anything that will change the disk.
          -t           Show trace of program execution -- try with -n.
          -v           CVS version and copyright.
          -T tmpdir    Use 'tmpdir' for temporary files.
          -e editor    Use 'editor' for editing log information.
          -d CVS_root  Overrides $CVSROOT as the root of the CVS tree.
          -f           Do not use the ~/.cvsrc file.
          -z #         Use compression level '#' for net traffic.
          -a           Authenticate all net traffic.
          -s VAR=VAL   Set CVS user variable.




# REPOSITORY: overall info
  
  #https://web.archive.org/web/20140311163748/http://ximbiot.com/cvs/manual/cvs-1.11.23/cvs_2.html#SEC9
  
  #Stores a complete copy of all the files and directories which are under version control
  #Normally, you never access any of the files in the repository directly. Instead, you 
  use CVS commands to get your own copy of the files into a working directory, and then 
  work on that copy. When you’ve finished a set of changes, you check (or commit) them 
  back into the repository. The repository then contains the changes which you have made, 
  as well as recording exactly what you changed, when you changed it, and other such 
  information. Note that the repository is not a subdirectory of the working directory, or 
  vice versa; they should be in separate locations.
  #CVS can access a repository by a variety of means. It might be on the local computer, 
  or it might be on a computer across the room or across the world. 
  #The repository is split in two parts. ‘$CVSROOT/CVSROOT’ contains administrative files 
  for CVS. The other directories contain the actual user-defined modules.

  #Default
:local:/usr/local/cvs
  OR
/usr/local/cvs




# REPOSITORY: set location

  #Specify repository location
    #Global (permanent) way
export CVSROOT=/u01/projects/cvs
    #Local (dynamic - within command) - priority is higer
    #Once you’ve checked a working copy out from the repository. 
    its repository is (the information is recorded in the ‘CVS/Root’ file in the working 
    copy).
    #The -d option and the ‘CVS/Root’ file both override the $CVSROOT environment variable
cvs -d /usr/local/cvsroot checkout yoyodyne/tc




# REPOSITORY: create

  #Create a CVS repository if it doesn't exist
    #if global var is set
cvs init
    #if not
cvs -d /u01/projects/repocvs init




# REPOSITORY: how to work remotely

	#Log as any user to leis1
	

	#This var should be established to work with remote CVS repository

export CVS_RSH=/usr/bin/ssh
export CVS_SERVER=/usr/local/bin/cvs
	
	#Go to the directory where source code will be checkouted


	#Checkout the source code from repository on lnp2vm
	
cvs -d :ext:bldadm@lnp2vm.cc.telcordia.com:/cvs/leisxngRepository co lxngTestSSO


	#Checkin the source code to repository on lnp2vm
	
cvs -d :ext:bldadm@lnp2vm.cc.telcordia.com:/cvs/leisxngRepository ci lxngTestSSO

	
	#Cleanup the checkouted source code
	
cvs -d :ext:bldadm@lnp2vm.cc.telcordia.com:/cvs/leisxngRepository release -d lxngTestSSO	



# REVISION: co file with specific revison

  #To CO file1.txt with revision 1.2
  
cvs co -r 1.2 full_path_in_module/file1.txt




# VERSION: show current CVS version

cvs version

  Concurrent Versions System (CVS) 1.12.13 (client/server)
  with CVSACL Patch 1.2.5 (cvsacl.sourceforge.net)
   and additional Telcordia ACL patches (March 2012)
























  

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
