######################################
## This is to automate some routine 
## with PR handling on Development env
##
######################################

name: Auto Approve Workflow

on: 
  pull_request:
    paths:
      - 'development/**'
      - 'development-new/**'
    types:
      - opened
      - edited
      - reopened

jobs:
  auto_steps:
    runs-on: ubuntu-latest
    steps:
          
    - name: what files modified
      run: |
          # List of the dirs, modifications of which could be Automatically Approved
          #   LIST_OF_ONLY_DIRS_TO_BE_MODIFIED="dir1 dir2 dir3 ..."
          LIST_OF_ONLY_DIRS_TO_BE_MODIFIED="development development-new"
          curl --request GET \
          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/files \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
          grep filename > modified_files_list.txt
          cat modified_files_list.txt | awk ' {print $2} ' | sed -e "s/\"//" | sed -e "s/\/.*//" | uniq > modified_dirs_list.txt
          for modified_dir in `cat modified_dirs_list.txt`
          do
              if
                echo ${LIST_OF_ONLY_DIRS_TO_BE_MODIFIED} | grep ${modified_dir}
              then
                echo
                echo "  \"${modified_dir}\" is allowed for modifications, if you want to be Auto Approved."
                echo
              else
                echo
                echo "  \"${modified_dir}\" is not allowed for modifications, if you want to be Auto Approved."
                echo
                FILE_IS_OUT_OF_ALLOWED_DIR="yes"
              fi
          done
          if [ "${FILE_IS_OUT_OF_ALLOWED_DIR}" = "yes" ]
          then
            echo
            echo "  ERROR: PR can not be Auto Approved, as files out of \"$LIST_OF_ONLY_DIRS_TO_BE_MODIFIED\" dir list were found."
            echo
            exit 8
          else
            echo
            echo "  CONFIRMED: PR can be Auto Approved, as all modified files are in \"$LIST_OF_ONLY_DIRS_TO_BE_MODIFIED\" dir list."
            echo
          fi
    - name: PR auto approve
      uses: hmarr/auto-approve-action@v2.0.0
      with:
        github-token: "${{ secrets.GITHUB_TOKEN }}"

    - name: is PR automerge restricted by label
      run: |
          # PR should not have "do_not_automerge" restriction label
          if 
            curl --request GET \
            --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }} \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | \
            grep "name" | grep do_not_automerge
          then 
            echo
            echo  " ERROR: PR is labeled as \"do_not_automerge\", stopping auto steps ..."
            echo
            exit 6
          else
            echo
            echo  " CONFIRMED: PR has no restriction labels."
            echo
          fi
    - name: auto rebase and merge
      # Community has pascalgn/automerge-action GitHub Actions code that auto merges PR, but only after automerge label is put on the PR.
      # To create Auto Merge step, which auto merges PR without any label, following was done:
      # 1. Clone https://github.com/pascalgn/automerge-action repo.
      # 2. Update following files to remove the value of label - automerge - that triggers auto merge step. Thus, no specific label is needed to trigger the step anymore.
      #     bin/automerge.js
      #     test/common.js
      # 3. Create Docker image from this updated repo.
      # 4. Put just built Docker image to any place available for GitHub. In this example it's mine personal ppnp account.
      # 5. Update Auto Merge step to use this custom Docker image.
      uses: docker://ppnp/nolabelautomerge:latest
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        MERGE_METHOD: "rebase"

    - name: delete branch
      run: |
          curl --request DELETE \
          --url https://api.github.com/repos/${{ github.repository }}/git/refs/heads/${{ github.head_ref }} \
          --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'
    # Slack notification step needs following to be done:
    #    1. Generate a Slack incoming webhook token, as described at:
    #       https://slack.com/apps/A0F7XDUAZ-incoming-webhooks.
    #    2. Create `SLACK_WEBHOOK` GitHub secret for generated webhook, as described at:
    #       https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets#creating-encrypted-secrets.
    - name: slack notification
      # Community has rtCamp/action-slack-notify GitHub Actions code that sends you Slack notification each time the step is triggered.
      # To use already built Docker image, following was done:
      # 1. Clone https://github.com/rtCamp/action-slack-notify repo.
      # 2. Create Docker image from the repo.
      # 3. Put just built Docker image to any place available for GitHub. In this example it's mine personal ppnp account.
      # 4. Update Slack Notify step to use this custom Docker image.
      uses: docker://ppnp/actions-slack-notify:latest
      env:
        SLACK_CHANNEL: releases-autoapproved
        SLACK_COLOR: '#3278BD'
        SLACK_ICON: https://github.com/rtCamp.png?size=48
        SLACK_MESSAGE: 'PR `${{ github.event.number }}` automatically approved and merged, its `${{ github.head_ref }}` branch deleted.'
        SLACK_TITLE: 'Congrats! :fire:'
        SLACK_USERNAME: auto-merge bot
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
